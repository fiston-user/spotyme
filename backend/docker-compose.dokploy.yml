services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spotyme-backend
    restart: unless-stopped
    environment:
      # Server Configuration
      PORT: 3000
      NODE_ENV: production

      # MongoDB Configuration - External MongoDB Atlas or other MongoDB service
      # Format: mongodb+srv://username:password@cluster.mongodb.net/database
      # Or: mongodb://username:password@host:port/database
      MONGODB_URI: ${MONGODB_URI}

      # Spotify API Credentials
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}

      # Session Configuration
      SESSION_SECRET: ${SESSION_SECRET}
      SESSION_STORE_SECRET: ${SESSION_STORE_SECRET:-${SESSION_SECRET}}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY:-7d}

      # Frontend URL (for CORS)
      FRONTEND_URL: ${FRONTEND_URL}

      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # Encryption Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    labels:
      # Traefik configuration for Dokploy
      - "traefik.enable=true"
      - "traefik.http.routers.spotyme-backend.rule=Host(`${BACKEND_DOMAIN:-api.spotyme.com}`)"
      - "traefik.http.routers.spotyme-backend.entrypoints=websecure"
      - "traefik.http.routers.spotyme-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.spotyme-backend.loadbalancer.server.port=3000"
      # CORS headers middleware
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowOriginList=${FRONTEND_URL}"
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.routers.spotyme-backend.middlewares=spotyme-cors"
    networks:
      - dokploy-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

networks:
  dokploy-network:
    external: true
