version: '3.8'

services:
  backend:
    image: gcr.io/make-automation-455521/spotyme-backend:latest
    container_name: spotyme-backend
    restart: unless-stopped
    environment:
      # Server Configuration
      PORT: 3000
      NODE_ENV: production
      
      # MongoDB Configuration - Internal connection
      MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/spotyme?authSource=admin
      
      # Spotify API Credentials
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}
      
      # Session Configuration
      SESSION_SECRET: ${SESSION_SECRET}
      SESSION_STORE_SECRET: ${SESSION_STORE_SECRET}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY:-7d}
      
      # Frontend URL (for CORS)
      FRONTEND_URL: ${FRONTEND_URL}
      
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Encryption Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    labels:
      # Traefik configuration for Dokploy
      - "traefik.enable=true"
      - "traefik.http.routers.spotyme-backend.rule=Host(`${BACKEND_DOMAIN:-api.spotyme.com}`)"
      - "traefik.http.routers.spotyme-backend.entrypoints=websecure"
      - "traefik.http.routers.spotyme-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.spotyme-backend.loadbalancer.server.port=3000"
      # CORS headers middleware
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowOriginList=${FRONTEND_URL}"
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.spotyme-cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.routers.spotyme-backend.middlewares=spotyme-cors"
    networks:
      - dokploy-network
      - spotyme-internal
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  mongodb:
    image: mongo:7.0
    container_name: spotyme-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-spotyme}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
      - ./files/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongo-backup:/backup
    networks:
      - spotyme-internal
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    command: ["--auth", "--bind_ip_all"]

volumes:
  mongo-data:
    driver: local
  mongo-backup:
    driver: local

networks:
  dokploy-network:
    external: true
  spotyme-internal:
    driver: bridge
    internal: true  # Make this network internal-only for security